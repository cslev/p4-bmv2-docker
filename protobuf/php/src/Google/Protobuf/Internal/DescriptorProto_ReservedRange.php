<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/protobuf/descriptor.proto

namespace Google\Protobuf\Internal;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBWire;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\InputStream;

use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Range of reserved tag numbers. Reserved tag numbers may not be used by
 * fields or extension ranges in the same message. Reserved ranges may
 * not overlap.
 * </pre>
 *
 * Protobuf type <code>google.protobuf.DescriptorProto.ReservedRange</code>
 */
class DescriptorProto_ReservedRange extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Inclusive.
     * </pre>
     *
     * <code>optional int32 start = 1;</code>
     */
    private $start = 0;
    private $has_start = false;
    /**
     * <pre>
     * Exclusive.
     * </pre>
     *
     * <code>optional int32 end = 2;</code>
     */
    private $end = 0;
    private $has_end = false;

    public function __construct() {
        \GPBMetadata\Google\Protobuf\Internal\Descriptor::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Inclusive.
     * </pre>
     *
     * <code>optional int32 start = 1;</code>
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * <pre>
     * Inclusive.
     * </pre>
     *
     * <code>optional int32 start = 1;</code>
     */
    public function setStart($var)
    {
        GPBUtil::checkInt32($var);
        $this->start = $var;
        $this->has_start = true;
    }

    public function hasStart()
    {
        return $this->has_start;
    }

    /**
     * <pre>
     * Exclusive.
     * </pre>
     *
     * <code>optional int32 end = 2;</code>
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * <pre>
     * Exclusive.
     * </pre>
     *
     * <code>optional int32 end = 2;</code>
     */
    public function setEnd($var)
    {
        GPBUtil::checkInt32($var);
        $this->end = $var;
        $this->has_end = true;
    }

    public function hasEnd()
    {
        return $this->has_end;
    }

}

